{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import color from'color';import{useInternalTheme}from\"../../core/theming\";import Icon from\"../Icon\";import TouchableRipple from\"../TouchableRipple/TouchableRipple\";import Text from\"../Typography/Text\";import{getSegmentedButtonBorderRadius,getSegmentedButtonColors,getSegmentedButtonDensityPadding}from\"./utils\";var SegmentedButtonItem=function SegmentedButtonItem(_ref){var checked=_ref.checked,accessibilityLabel=_ref.accessibilityLabel,disabled=_ref.disabled,style=_ref.style,showSelectedCheck=_ref.showSelectedCheck,checkedColor=_ref.checkedColor,uncheckedColor=_ref.uncheckedColor,icon=_ref.icon,testID=_ref.testID,label=_ref.label,onPress=_ref.onPress,segment=_ref.segment,_ref$density=_ref.density,density=_ref$density===void 0?'regular':_ref$density,themeOverrides=_ref.theme;var theme=useInternalTheme(themeOverrides);var checkScale=React.useRef(new Animated.Value(0)).current;React.useEffect(function(){if(!showSelectedCheck){return;}if(checked){Animated.spring(checkScale,{toValue:1,useNativeDriver:true}).start();}else{Animated.spring(checkScale,{toValue:0,useNativeDriver:true}).start();}},[checked,checkScale,showSelectedCheck]);var roundness=theme.roundness,isV3=theme.isV3;var _getSegmentedButtonCo=getSegmentedButtonColors({checked:checked,theme:theme,disabled:disabled,checkedColor:checkedColor,uncheckedColor:uncheckedColor}),borderColor=_getSegmentedButtonCo.borderColor,textColor=_getSegmentedButtonCo.textColor,borderWidth=_getSegmentedButtonCo.borderWidth,backgroundColor=_getSegmentedButtonCo.backgroundColor;var borderRadius=(isV3?5:1)*roundness;var segmentBorderRadius=getSegmentedButtonBorderRadius({theme:theme,segment:segment});var rippleColor=color(textColor).alpha(0.12).rgb().string();var showIcon=!icon?false:label&&checked?!showSelectedCheck:true;var showCheckedIcon=checked&&showSelectedCheck;var iconSize=isV3?18:16;var iconStyle=_objectSpread({marginRight:label?5:showCheckedIcon?3:0},label&&{transform:[{scale:checkScale.interpolate({inputRange:[0,1],outputRange:[1,0]})}]});var buttonStyle=_objectSpread({backgroundColor:backgroundColor,borderColor:borderColor,borderWidth:borderWidth,borderRadius:borderRadius},segmentBorderRadius);var paddingVertical=getSegmentedButtonDensityPadding({density:density});var rippleStyle=_objectSpread({borderRadius:borderRadius},segmentBorderRadius);var labelTextStyle=_objectSpread(_objectSpread({},!isV3?{textTransform:'uppercase',fontWeight:'500'}:theme.fonts.labelLarge),{},{color:textColor});return React.createElement(View,{style:[buttonStyle,styles.button,style]},React.createElement(TouchableRipple,{borderless:true,onPress:onPress,accessibilityLabel:accessibilityLabel,accessibilityState:{disabled:disabled,checked:checked},accessibilityRole:\"button\",disabled:disabled,rippleColor:rippleColor,testID:testID,style:rippleStyle,theme:theme},React.createElement(View,{style:[styles.content,{paddingVertical:paddingVertical}]},showCheckedIcon?React.createElement(Animated.View,{testID:testID+\"-check-icon\",style:[iconStyle,{transform:[{scale:checkScale}]}]},React.createElement(Icon,{source:'check',size:iconSize,color:textColor})):null,showIcon?React.createElement(Animated.View,{testID:testID+\"-icon\",style:iconStyle},React.createElement(Icon,{source:icon,size:iconSize,color:textColor})):null,React.createElement(Text,{variant:\"labelLarge\",style:[styles.label,labelTextStyle],selectable:false,numberOfLines:1},label))));};var styles=StyleSheet.create({button:{flex:1,minWidth:76,borderStyle:'solid'},label:{textAlign:'center'},content:{flexDirection:'row',alignItems:'center',justifyContent:'center',paddingVertical:9,paddingHorizontal:16}});export default SegmentedButtonItem;export{SegmentedButtonItem as SegmentedButton};","map":{"version":3,"names":["React","Animated","StyleSheet","View","color","useInternalTheme","Icon","TouchableRipple","Text","getSegmentedButtonBorderRadius","getSegmentedButtonColors","getSegmentedButtonDensityPadding","SegmentedButtonItem","_ref","checked","accessibilityLabel","disabled","style","showSelectedCheck","checkedColor","uncheckedColor","icon","testID","label","onPress","segment","_ref$density","density","themeOverrides","theme","checkScale","useRef","Value","current","useEffect","spring","toValue","useNativeDriver","start","roundness","isV3","_getSegmentedButtonCo","borderColor","textColor","borderWidth","backgroundColor","borderRadius","segmentBorderRadius","rippleColor","alpha","rgb","string","showIcon","showCheckedIcon","iconSize","iconStyle","_objectSpread","marginRight","transform","scale","interpolate","inputRange","outputRange","buttonStyle","paddingVertical","rippleStyle","labelTextStyle","textTransform","fontWeight","fonts","labelLarge","createElement","styles","button","borderless","accessibilityState","accessibilityRole","content","source","size","variant","selectable","numberOfLines","create","flex","minWidth","borderStyle","textAlign","flexDirection","alignItems","justifyContent","paddingHorizontal","SegmentedButton"],"sources":["D:\\project\\module\\module\\node_modules\\react-native-paper\\src\\components\\SegmentedButtons\\SegmentedButtonItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\nimport type { ThemeProp } from 'src/types';\n\nimport { useInternalTheme } from '../../core/theming';\nimport type { IconSource } from '../Icon';\nimport Icon from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport {\n  getSegmentedButtonBorderRadius,\n  getSegmentedButtonColors,\n  getSegmentedButtonDensityPadding,\n} from './utils';\n\nexport type Props = {\n  /**\n   * Whether the segmented button is checked\n   */\n  checked: boolean;\n  /**\n   * Icon to display for the `SegmentedButtonItem`.\n   */\n  icon?: IconSource;\n\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Custom color for unchecked Text and Icon.\n   */\n  uncheckedColor?: string;\n\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Custom color for checked Text and Icon.\n   */\n  checkedColor?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `SegmentedButtonItem`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n  /**\n   * Value of button.\n   */\n  value: string;\n  /**\n   * Label text of the button.\n   */\n  label?: string;\n  /**\n   * Button segment.\n   */\n  segment?: 'first' | 'last';\n  /**\n   * Show optional check icon to indicate selected state\n   */\n  showSelectedCheck?: boolean;\n  /**\n   * Density is applied to the height, to allow usage in denser UIs.\n   */\n  density?: 'regular' | 'small' | 'medium' | 'high';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\nconst SegmentedButtonItem = ({\n  checked,\n  accessibilityLabel,\n  disabled,\n  style,\n  showSelectedCheck,\n  checkedColor,\n  uncheckedColor,\n  icon,\n  testID,\n  label,\n  onPress,\n  segment,\n  density = 'regular',\n  theme: themeOverrides,\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n\n  const checkScale = React.useRef(new Animated.Value(0)).current;\n\n  React.useEffect(() => {\n    if (!showSelectedCheck) {\n      return;\n    }\n    if (checked) {\n      Animated.spring(checkScale, {\n        toValue: 1,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.spring(checkScale, {\n        toValue: 0,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [checked, checkScale, showSelectedCheck]);\n\n  const { roundness, isV3 } = theme;\n  const { borderColor, textColor, borderWidth, backgroundColor } =\n    getSegmentedButtonColors({\n      checked,\n      theme,\n      disabled,\n      checkedColor,\n      uncheckedColor,\n    });\n\n  const borderRadius = (isV3 ? 5 : 1) * roundness;\n  const segmentBorderRadius = getSegmentedButtonBorderRadius({\n    theme,\n    segment,\n  });\n  const rippleColor = color(textColor).alpha(0.12).rgb().string();\n\n  const showIcon = !icon ? false : label && checked ? !showSelectedCheck : true;\n  const showCheckedIcon = checked && showSelectedCheck;\n\n  const iconSize = isV3 ? 18 : 16;\n  const iconStyle = {\n    marginRight: label ? 5 : showCheckedIcon ? 3 : 0,\n    ...(label && {\n      transform: [\n        {\n          scale: checkScale.interpolate({\n            inputRange: [0, 1],\n            outputRange: [1, 0],\n          }),\n        },\n      ],\n    }),\n  };\n\n  const buttonStyle: ViewStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius,\n    ...segmentBorderRadius,\n  };\n  const paddingVertical = getSegmentedButtonDensityPadding({ density });\n  const rippleStyle: ViewStyle = {\n    borderRadius,\n    ...segmentBorderRadius,\n  };\n  const labelTextStyle: TextStyle = {\n    ...(!isV3\n      ? {\n          textTransform: 'uppercase',\n          fontWeight: '500',\n        }\n      : theme.fonts.labelLarge),\n    color: textColor,\n  };\n\n  return (\n    <View style={[buttonStyle, styles.button, style]}>\n      <TouchableRipple\n        borderless\n        onPress={onPress}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityState={{ disabled, checked }}\n        accessibilityRole=\"button\"\n        disabled={disabled}\n        rippleColor={rippleColor}\n        testID={testID}\n        style={rippleStyle}\n        theme={theme}\n      >\n        <View style={[styles.content, { paddingVertical }]}>\n          {showCheckedIcon ? (\n            <Animated.View\n              testID={`${testID}-check-icon`}\n              style={[iconStyle, { transform: [{ scale: checkScale }] }]}\n            >\n              <Icon source={'check'} size={iconSize} color={textColor} />\n            </Animated.View>\n          ) : null}\n          {showIcon ? (\n            <Animated.View testID={`${testID}-icon`} style={iconStyle}>\n              <Icon source={icon} size={iconSize} color={textColor} />\n            </Animated.View>\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            style={[styles.label, labelTextStyle]}\n            selectable={false}\n            numberOfLines={1}\n          >\n            {label}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    flex: 1,\n    minWidth: 76,\n    borderStyle: 'solid',\n  },\n  label: {\n    textAlign: 'center',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 9,\n    paddingHorizontal: 16,\n  },\n});\n\nexport default SegmentedButtonItem;\n\nexport { SegmentedButtonItem as SegmentedButton };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}