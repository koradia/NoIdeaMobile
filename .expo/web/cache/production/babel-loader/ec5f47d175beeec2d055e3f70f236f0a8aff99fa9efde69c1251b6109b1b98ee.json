{"ast":null,"code":"'use strict';var AssetSourceResolver=require(\"./AssetSourceResolver\");var _require=require(\"./AssetUtils\"),pickScale=_require.pickScale;var AssetRegistry=require('@react-native/assets/registry');var _customSourceTransformer,_serverURL,_scriptURL;var _sourceCodeScriptURL;function getSourceCodeScriptURL(){if(_sourceCodeScriptURL){return _sourceCodeScriptURL;}var sourceCode=global.nativeExtensions&&global.nativeExtensions.SourceCode;if(!sourceCode){sourceCode=require(\"../NativeModules/specs/NativeSourceCode\").default;}_sourceCodeScriptURL=sourceCode.getConstants().scriptURL;return _sourceCodeScriptURL;}function getDevServerURL(){if(_serverURL===undefined){var sourceCodeScriptURL=getSourceCodeScriptURL();var match=sourceCodeScriptURL&&sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);if(match){_serverURL=match[0];}else{_serverURL=null;}}return _serverURL;}function _coerceLocalScriptURL(scriptURL){if(scriptURL){if(scriptURL.startsWith('assets://')){return null;}scriptURL=scriptURL.substring(0,scriptURL.lastIndexOf('/')+1);if(!scriptURL.includes('://')){scriptURL='file://'+scriptURL;}}return scriptURL;}function getScriptURL(){if(_scriptURL===undefined){_scriptURL=_coerceLocalScriptURL(getSourceCodeScriptURL());}return _scriptURL;}function setCustomSourceTransformer(transformer){_customSourceTransformer=transformer;}function resolveAssetSource(source){if(typeof source==='object'){return source;}var asset=AssetRegistry.getAssetByID(source);if(!asset){return null;}var resolver=new AssetSourceResolver(getDevServerURL(),getScriptURL(),asset);if(_customSourceTransformer){return _customSourceTransformer(resolver);}return resolver.defaultAsset();}resolveAssetSource.pickScale=pickScale;resolveAssetSource.setCustomSourceTransformer=setCustomSourceTransformer;module.exports=resolveAssetSource;","map":{"version":3,"names":["AssetSourceResolver","require","_require","pickScale","AssetRegistry","_customSourceTransformer","_serverURL","_scriptURL","_sourceCodeScriptURL","getSourceCodeScriptURL","sourceCode","global","nativeExtensions","SourceCode","default","getConstants","scriptURL","getDevServerURL","undefined","sourceCodeScriptURL","match","_coerceLocalScriptURL","startsWith","substring","lastIndexOf","includes","getScriptURL","setCustomSourceTransformer","transformer","resolveAssetSource","source","asset","getAssetByID","resolver","defaultAsset","module","exports"],"sources":["D:/project/module/module/node_modules/react-native/Libraries/Image/resolveAssetSource.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n// Resolves an asset into a `source` for `Image`.\n\n'use strict';\n\nimport type {ResolvedAssetSource} from './AssetSourceResolver';\n\nconst AssetSourceResolver = require('./AssetSourceResolver');\nconst {pickScale} = require('./AssetUtils');\nconst AssetRegistry = require('@react-native/assets/registry');\n\nlet _customSourceTransformer, _serverURL, _scriptURL;\n\nlet _sourceCodeScriptURL: ?string;\nfunction getSourceCodeScriptURL(): ?string {\n  if (_sourceCodeScriptURL) {\n    return _sourceCodeScriptURL;\n  }\n\n  let sourceCode =\n    global.nativeExtensions && global.nativeExtensions.SourceCode;\n  if (!sourceCode) {\n    sourceCode = require('../NativeModules/specs/NativeSourceCode').default;\n  }\n  _sourceCodeScriptURL = sourceCode.getConstants().scriptURL;\n  return _sourceCodeScriptURL;\n}\n\nfunction getDevServerURL(): ?string {\n  if (_serverURL === undefined) {\n    const sourceCodeScriptURL = getSourceCodeScriptURL();\n    const match =\n      sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n    if (match) {\n      // jsBundle was loaded from network\n      _serverURL = match[0];\n    } else {\n      // jsBundle was loaded from file\n      _serverURL = null;\n    }\n  }\n  return _serverURL;\n}\n\nfunction _coerceLocalScriptURL(scriptURL: ?string): ?string {\n  if (scriptURL) {\n    if (scriptURL.startsWith('assets://')) {\n      // android: running from within assets, no offline path to use\n      return null;\n    }\n    scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);\n    if (!scriptURL.includes('://')) {\n      // Add file protocol in case we have an absolute file path and not a URL.\n      // This shouldn't really be necessary. scriptURL should be a URL.\n      scriptURL = 'file://' + scriptURL;\n    }\n  }\n  return scriptURL;\n}\n\nfunction getScriptURL(): ?string {\n  if (_scriptURL === undefined) {\n    _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());\n  }\n  return _scriptURL;\n}\n\nfunction setCustomSourceTransformer(\n  transformer: (resolver: AssetSourceResolver) => ResolvedAssetSource,\n): void {\n  _customSourceTransformer = transformer;\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nfunction resolveAssetSource(source: any): ?ResolvedAssetSource {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  const asset = AssetRegistry.getAssetByID(source);\n  if (!asset) {\n    return null;\n  }\n\n  const resolver = new AssetSourceResolver(\n    getDevServerURL(),\n    getScriptURL(),\n    asset,\n  );\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\n\nresolveAssetSource.pickScale = pickScale;\nresolveAssetSource.setCustomSourceTransformer = setCustomSourceTransformer;\nmodule.exports = resolveAssetSource;\n"],"mappings":"AAYA,YAAY,CAIZ,GAAM,CAAAA,mBAAmB,CAAGC,OAAO,yBAAyB,CAC5D,IAAAC,QAAA,CAAoBD,OAAO,gBAAgB,CAApCE,SAAS,CAAAD,QAAA,CAATC,SAAS,CAChB,GAAM,CAAAC,aAAa,CAAGH,OAAO,CAAC,+BAA+B,CAAC,CAE9D,GAAI,CAAAI,wBAAwB,CAAEC,UAAU,CAAEC,UAAU,CAEpD,GAAI,CAAAC,oBAA6B,CACjC,QAAS,CAAAC,sBAAsBA,CAAA,CAAY,CACzC,GAAID,oBAAoB,CAAE,CACxB,MAAO,CAAAA,oBAAoB,CAC7B,CAEA,GAAI,CAAAE,UAAU,CACZC,MAAM,CAACC,gBAAgB,EAAID,MAAM,CAACC,gBAAgB,CAACC,UAAU,CAC/D,GAAI,CAACH,UAAU,CAAE,CACfA,UAAU,CAAGT,OAAO,2CAA2C,CAACa,OAAO,CACzE,CACAN,oBAAoB,CAAGE,UAAU,CAACK,YAAY,EAAE,CAACC,SAAS,CAC1D,MAAO,CAAAR,oBAAoB,CAC7B,CAEA,QAAS,CAAAS,eAAeA,CAAA,CAAY,CAClC,GAAIX,UAAU,GAAKY,SAAS,CAAE,CAC5B,GAAM,CAAAC,mBAAmB,CAAGV,sBAAsB,EAAE,CACpD,GAAM,CAAAW,KAAK,CACTD,mBAAmB,EAAIA,mBAAmB,CAACC,KAAK,CAAC,mBAAmB,CAAC,CACvE,GAAIA,KAAK,CAAE,CAETd,UAAU,CAAGc,KAAK,CAAC,CAAC,CAAC,CACvB,CAAC,IAAM,CAELd,UAAU,CAAG,IAAI,CACnB,CACF,CACA,MAAO,CAAAA,UAAU,CACnB,CAEA,QAAS,CAAAe,qBAAqBA,CAACL,SAAkB,CAAW,CAC1D,GAAIA,SAAS,CAAE,CACb,GAAIA,SAAS,CAACM,UAAU,CAAC,WAAW,CAAC,CAAE,CAErC,MAAO,KAAI,CACb,CACAN,SAAS,CAAGA,SAAS,CAACO,SAAS,CAAC,CAAC,CAAEP,SAAS,CAACQ,WAAW,CAAC,GAAG,CAAC,CAAG,CAAC,CAAC,CAClE,GAAI,CAACR,SAAS,CAACS,QAAQ,CAAC,KAAK,CAAC,CAAE,CAG9BT,SAAS,CAAG,SAAS,CAAGA,SAAS,CACnC,CACF,CACA,MAAO,CAAAA,SAAS,CAClB,CAEA,QAAS,CAAAU,YAAYA,CAAA,CAAY,CAC/B,GAAInB,UAAU,GAAKW,SAAS,CAAE,CAC5BX,UAAU,CAAGc,qBAAqB,CAACZ,sBAAsB,EAAE,CAAC,CAC9D,CACA,MAAO,CAAAF,UAAU,CACnB,CAEA,QAAS,CAAAoB,0BAA0BA,CACjCC,WAAmE,CAC7D,CACNvB,wBAAwB,CAAGuB,WAAW,CACxC,CAMA,QAAS,CAAAC,kBAAkBA,CAACC,MAAW,CAAwB,CAC7D,GAAI,MAAO,CAAAA,MAAM,GAAK,QAAQ,CAAE,CAC9B,MAAO,CAAAA,MAAM,CACf,CAEA,GAAM,CAAAC,KAAK,CAAG3B,aAAa,CAAC4B,YAAY,CAACF,MAAM,CAAC,CAChD,GAAI,CAACC,KAAK,CAAE,CACV,MAAO,KAAI,CACb,CAEA,GAAM,CAAAE,QAAQ,CAAG,GAAI,CAAAjC,mBAAmB,CACtCiB,eAAe,EAAE,CACjBS,YAAY,EAAE,CACdK,KAAK,CACN,CACD,GAAI1B,wBAAwB,CAAE,CAC5B,MAAO,CAAAA,wBAAwB,CAAC4B,QAAQ,CAAC,CAC3C,CACA,MAAO,CAAAA,QAAQ,CAACC,YAAY,EAAE,CAChC,CAEAL,kBAAkB,CAAC1B,SAAS,CAAGA,SAAS,CACxC0B,kBAAkB,CAACF,0BAA0B,CAAGA,0BAA0B,CAC1EQ,MAAM,CAACC,OAAO,CAAGP,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}